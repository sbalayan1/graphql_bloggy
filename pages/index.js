import Head from 'next/head'
import styles from '../styles/Home.module.css'
import {GraphQLClient, gql} from 'graphql-request'

import BlogCard from '../components/BlogCard'

const graphCMS = new GraphQLClient("https://api-us-west-2.hygraph.com/v2/cl95t1j8b6k1701ul81wo6gkt/master") //

//create a query
const postQuery = gql`
  {
    posts {
      id
      title
      datePublished
      slug
      content{
        html
      }
      author{
        name
        avatar {
          url
        }
      }
      coverPhoto {
        url
      }
    }
  }
`
//use static props => is a function that allows us to do an api request, after we do our api requst, next js will let us do static html pages
  //basically will read the data, then when uploaded on github, it will take every blog post and generate a file for it
  //when people visit your website, they will not need to make any api requests. All of these pages will be pregenerated. Another way to say it is that these posts are statically generated

export async function getStaticProps() {
  const { posts } = await graphCMS.request(postQuery) //makes an api call. v similar to a fetch request

  //when you use getStaticProps, you always want to return something here in props. The props property gets passed into the home component
  return  {
    props: {
      posts
    },
    revalidate: 10 //since these pages are statically generated, we can use the revalidate property to regenerate the static pages in case the api gets updated. here we revalidate every 10 seconds. check to see if the revalidate is on auto
  }
}

export default function Home({posts}) {
  return (
    <div className={styles.container}>
      <Head>
        <title>Bloggy</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {posts.map((post) => (
          <BlogCard 
            key={post.id} 
            title={post.title} 
            author={post.author} 
            coverPhoto={post.coverPhoto} 
            datePublished={post.datePublished} 
            content={post.content} 
            slug={post.slug}/>
        ))}
      </main>

    </div>
  )
}
